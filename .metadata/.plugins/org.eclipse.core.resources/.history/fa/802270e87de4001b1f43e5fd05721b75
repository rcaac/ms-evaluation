package com.atachagua.ms.evaluation.training.controller.commons;

public class Snippet {
	@Autowired
	    private PersonRepository personRepository;
	
	    @Override
	    public List<Person> getAll() throws ExceptionService {
	        try {
	            List<Person> lstPerson = this.getPersonRepository().findAllCustom();
	            return lstPerson;
	        } catch (Exception e) {
	            log.error(e.getMessage());
	            throw new ExceptionService(e);
	        }
	    }
	
	    @Override
	    public List<Person> findByLikeName(String nombre) throws ExceptionService {
	        try {
	
	            nombre = (nombre == null) ? "" : nombre;
	
	            return this.getPersonRepository().findByLikeName("%" + nombre.toUpperCase() + "%");
	
	        } catch (Exception e) {
	            throw new ExceptionService(e);
	        }
	
	    }
	
	    @Override
	    public Optional<Person> findById(Person person) throws ExceptionService {
	        try {
	            Optional<Person> optPerson = this.getPersonRepository().findById(person.getIdPerson());
	            if (optPerson == null) {
	                return null;
	            }
	            return optPerson;
	        } catch (Exception e) {
	            log.error(e.getMessage());
	            throw new ExceptionService(e);
	        }
	    }
	
	    @Override
	    public Person insert(Person person) throws ExceptionService {
	        try {
	            return this.getPersonRepository().save(person);
	        } catch (Exception e) {
	            log.error(e.getMessage());
	            throw new ExceptionService(e);
	        }
	    }
	
	    @Override
	    public Person update(Person person) throws ExceptionService {
	        try {
	            return this.getPersonRepository().save(person);
	        } catch (Exception e) {
	            log.error(e.getMessage());
	            throw new ExceptionService(e);
	        }
	    }
	
	    @Override
	    public Person delete(Person person) throws ExceptionService {
	        try {
	            Optional<Person> optPerson = this.getPersonRepository().findById(person.getIdPerson());
	
	            if (optPerson == null) {
	                return null;
	            }
	
	            Person optionalPerson = optPerson.get();
	            optionalPerson.setState("0");
	            return this.getPersonRepository().save(optionalPerson);
	
	        } catch (Exception e) {
	            log.error(e.getMessage());
	            throw new ExceptionService(e);
	        }
	    }
}

